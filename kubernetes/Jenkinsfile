pipeline {
    agent any

    environment {
        AWS_ACCOUNT_ID = '654654291247'
        AWS_REGION = 'us-east-1'
        ECR_REPO = "${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/pingpong"
    }

    stages {
        stage('Clean Workspace') {
            steps {
                cleanWs()
            }
        }

        stage('Checkout') {
            steps {
                echo 'Checking out code from GitHub...'
                git branch: 'master', url: 'https://github.com/Fox-R-fox/Ponnggame.git'
            }
        }

        stage('Install Maven') {
            steps {
                echo 'Installing Maven...'
                sh '''
                    if ! command -v mvn &> /dev/null; then
                        echo "Maven not found, installing Maven..."
                        wget https://archive.apache.org/dist/maven/maven-3/3.9.6/binaries/apache-maven-3.9.6-bin.tar.gz
                        tar -xzvf apache-maven-3.9.6-bin.tar.gz
                        if [ -d "/var/lib/jenkins/.maven/apache-maven-3.9.6" ]; then
                            echo "Removing existing Maven directory..."
                            rm -rf /var/lib/jenkins/.maven/apache-maven-3.9.6
                        fi
                        mkdir -p /var/lib/jenkins/.maven
                        mv apache-maven-3.9.6 /var/lib/jenkins/.maven
                        export PATH=$PATH:/var/lib/jenkins/.maven/apache-maven-3.9.6/bin
                        echo "Maven installed successfully."
                    else
                        echo "Maven already installed."
                    fi
                '''
            }
        }

        stage('Build') {
            steps {
                echo 'Building the Pong Game...'
                script {
                    sh 'export PATH=$PATH:/var/lib/jenkins/.maven/apache-maven-3.9.6/bin && mvn clean package'
                    sh 'ls -la target/'
                    sh 'ls -la'
                }
            }
        }

        stage('Docker Build') {
            steps {
                echo 'Building Docker Image...'
                script {
                    sh '''
                    JAR_FILE=$(ls target/pong-game-1.0-SNAPSHOT.jar)
                    echo "Found JAR file: $JAR_FILE"
                    docker build --build-arg JAR_FILE=$JAR_FILE -t pingpong:latest .
                    '''
                }
            }
        }

        stage('Push to ECR') {
            steps {
                echo 'Pushing Docker Image to AWS ECR...'
                withAWS(credentials: 'aws-credentials', region: "${AWS_REGION}") {
                    sh """
                    aws ecr get-login-password --region ${AWS_REGION} | docker login --username AWS --password-stdin ${ECR_REPO}
                    docker tag pingpong:latest ${ECR_REPO}:latest
                    docker push ${ECR_REPO}:latest
                    """
                }
            }
        }

        stage('Setup Kubernetes Credentials') {
            steps {
                echo 'Setting up AWS EKS kubectl authentication...'
                withAWS(credentials: 'aws-credentials', region: "${AWS_REGION}") {
                    sh 'aws eks --region ${AWS_REGION} update-kubeconfig --name EKS-game'
                }
            }
        }
        stage('Configure AWS CLI') {
    steps {
        echo 'Configuring AWS CLI...'
        withAWS(credentials: 'aws-credentials', region: "${AWS_REGION}") {
            sh '''
                aws configure set aws_access_key_id ${AWS_ACCESS_KEY_ID}
                aws configure set aws_secret_access_key ${AWS_SECRET_ACCESS_KEY}
                aws configure set region ${AWS_REGION}
            '''
        }
    }
}

        stage('Deploy to Kubernetes') {
            steps {
                echo 'Deploying to Kubernetes...'
                sh 'kubectl apply -f kubernetes/deployment.yaml'
            }
        }
    }
}
